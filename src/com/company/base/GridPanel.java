package com.company.base;import javax.swing.*;import java.awt.*;import java.awt.event.*;public class GridPanel extends JPanel implements MouseListener, MouseMotionListener, KeyListener, MouseWheelListener {    protected boolean gridLines = true;    private Cell[][] grid;    private double scaleX, scaleY;    private int I, J, centerX, centerY;    public GridPanel(int N, double w, double h) {        grid = new Cell[N][N];        double p = 0.952;        scaleX = w / N * p;        scaleY = h / N * p;        addMouseListener(this);        addKeyListener(this);        addMouseMotionListener(this);        addMouseWheelListener(this);        for (int i = 0; i < grid.length; i++) {            for (int j = 0; j < grid[0].length; j++) {                grid[i][j] = new Cell(i, j, scaleX, scaleY);            }        }        setFocusable(true);    }    @Override    protected void paintComponent(Graphics g) {        super.paintComponent(g);        Graphics2D graphics2D = (Graphics2D) g;        for (Cell[] rectangle2DS : grid) {            for (Cell rectangle2D : rectangle2DS) {                graphics2D.setColor(rectangle2D.getColor());                graphics2D.fill(rectangle2D);                if (gridLines) {                    graphics2D.setColor(Color.BLACK);                    graphics2D.draw(rectangle2D);                }            }        }    }    public void noGridLines() {        gridLines = false;    }    protected void clearGrid() {        for (Cell[] cells : grid) {            for (Cell cell : cells) {                cell.setColor(Color.WHITE);            }        }        repaint();    }    public void setCenter(int x, int y) {        centerX = x;        centerY = y;        for (int i = 0; i < grid.length; i++) {            for (int j = 0; j < grid[0].length; j++) {                if (i == x || j == y) grid[i][j].setColor(Color.BLACK);            }        }    }    public int getCenterX() {        return centerX;    }    public int getCenterY() {        return centerY;    }    protected int getXPosition() {        return getClickedI() - centerX;    }    protected int getYPosition() {        return centerY - getClickedJ();    }    public Cell[][] getGrid() {        return grid;    }    protected int getClickedI() {        return I;    }    protected int getClickedJ() {        return J;    }    @Override    public void mouseClicked(MouseEvent e) {        repaint();    }    @Override    public void mousePressed(MouseEvent e) {        I = (int) (e.getX() / scaleX);        J = (int) (e.getY() / scaleY);    }    @Override    public void mouseReleased(MouseEvent e) {        repaint();    }    @Override    public void mouseEntered(MouseEvent e) {    }    @Override    public void mouseExited(MouseEvent e) {    }    @Override    public void mouseDragged(MouseEvent e) {    }    @Override    public void mouseMoved(MouseEvent e) {    }    @Override    public void keyTyped(KeyEvent e) {        repaint();    }    @Override    public void keyPressed(KeyEvent e) {        repaint();    }    @Override    public void keyReleased(KeyEvent e) {        repaint();    }    @Override    public void mouseWheelMoved(MouseWheelEvent e) {    }}